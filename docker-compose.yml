services:
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - 6379:6379  
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 1s
      timeout: 3s
    volumes:
      - redis_data:/data
    networks:
      - n8n-network

  postgres:
    image: postgres:17
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=${PGDATA}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  n8n:
    build:
      context: .
      dockerfile: Dockerfile
    user: root:root
    restart: unless-stopped
    ports:
      - "5678:5678"
      - "5679:5679"  
    environment:
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
      - N8N_USER_FOLDER=${N8N_USER_FOLDER}
      - N8N_PORT=${N8N_PORT}
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=${N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}  # You need to create your own encryption key
      # Queue mode config
      - EXECUTIONS_MODE=${EXECUTIONS_MODE}
      - QUEUE_BULL_REDIS_HOST=${QUEUE_BULL_REDIS_HOST}
      - QUEUE_HEALTH_CHECK_ACTIVE=${QUEUE_HEALTH_CHECK_ACTIVE}
      # DB config
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      # Task Runner config
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=${OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS}
      - N8N_RUNNERS_AUTH_TOKEN=${N8N_RUNNERS_AUTH_TOKEN}
      - N8N_TASK_BROKER_URL=${N8N_TASK_BROKER_URL}
      - N8N_COMMAND_RESPONSE_URL=${N8N_COMMAND_RESPONSE_URL}
      - N8N_TASK_BROKER_PORT=${N8N_TASK_BROKER_PORT}
      - NODE_FUNCTION_ALLOW_EXTERNAL=ajv,ajv-formats,puppeteer
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
    volumes:
      - n8n_main:/n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network

    healthcheck:
      test: ['CMD', 'node', '-v']
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 60s
      
  n8n-webhook:
    build:
      context: .
      dockerfile: Dockerfile
    user: root:root
    restart: unless-stopped
    command: sh /webhook
    environment:
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
      - N8N_USER_FOLDER=${N8N_USER_FOLDER}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}  # You need to create your own encryption key
      - N8N_PORT=${N8N_PORT}
      # Queue mode config
      - EXECUTIONS_MODE=${EXECUTIONS_MODE}
      - QUEUE_BULL_REDIS_HOST=${QUEUE_BULL_REDIS_HOST}
      - QUEUE_HEALTH_CHECK_ACTIVE=${QUEUE_HEALTH_CHECK_ACTIVE}
      # DB config
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      # Task Runner config
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=${OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS}
      - N8N_TASK_BROKER_URL=${N8N_TASK_BROKER_URL}
      - N8N_COMMAND_RESPONSE_URL=${N8N_COMMAND_RESPONSE_URL}
      - N8N_RUNNERS_AUTH_TOKEN=${N8N_RUNNERS_AUTH_TOKEN}
    volumes:
      - n8n_webhook:/n8n
    depends_on:
      n8n:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network


  n8n-worker:
    build:
      context: .
      dockerfile: Dockerfile
    user: root:root
    restart: unless-stopped
    stop_grace_period: 5m
    command: sh /worker
    environment:
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED}
      - N8N_USER_FOLDER=${N8N_USER_FOLDER} # Consider parameterizing this if scaling multiple unique workers
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}  # You need to create your own encryption key
      - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=false
      - NODE_FUNCTION_ALLOW_EXTERNAL=ajv,ajv-formats,puppeteer
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
      # Queue mode config
      - EXECUTIONS_MODE=${EXECUTIONS_MODE}
      - QUEUE_BULL_REDIS_HOST=${QUEUE_BULL_REDIS_HOST}
      - QUEUE_HEALTH_CHECK_ACTIVE=${QUEUE_HEALTH_CHECK_ACTIVE}
      - N8N_CONCURRENCY_PRODUCTION_LIMIT=10
      - N8N_QUEUE_BULL_GRACEFULSHUTDOWNTIMEOUT=300
      - N8N_GRACEFUL_SHUTDOWN_TIMEOUT=300
      # DB config
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      # Task Runner config
      - N8N_RUNNERS_AUTH_TOKEN=${N8N_RUNNERS_AUTH_TOKEN}
      - N8N_TASK_BROKER_URL=${N8N_TASK_BROKER_URL}
      - N8N_COMMAND_RESPONSE_URL=${N8N_COMMAND_RESPONSE_URL}
    depends_on:
      n8n:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network

    healthcheck:
      test: ['CMD', 'node','-v']
      interval: 5s
      timeout: 5s
      retries: 10

  redis-monitor:
    build:
      context: .
      dockerfile: monitor/monitor.Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - n8n-network
    environment:
      # These are defaults from monitor.Dockerfile, can be overridden here if needed
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - QUEUE_NAME_PREFIX=${QUEUE_NAME_PREFIX}
      - QUEUE_NAME=${QUEUE_NAME}
      - POLL_INTERVAL_SECONDS=${POLL_INTERVAL_SECONDS}

volumes:
  postgres_data:
  redis_data:
  n8n_main:
  n8n_webhook:

networks:
  n8n-network:
    driver: bridge